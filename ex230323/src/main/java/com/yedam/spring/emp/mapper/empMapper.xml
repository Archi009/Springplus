<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.spring.emp.mapper.EmpMapper">

	<!-- 원래 기본적으로 사용하는 방식은 EmpVO가 정의된 풀네임(위치값까지 모두) 적어야 하지만 typeAlias를 정의 해 
		놨기 때문에 간단하게 클래스 명만 적어도 된다 -->
	<!--필드 이름을 cId -> setCId() : cid 와 같이 mybatis가 인식하기 때문에 별칭을 두글자 이상으로 설정하자 -->
	<!-- 전체조회 -->
	<select id="selectEmpAllList" resultType="EmpVO">
		SELECT employee_id,
		first_name,
		last_name,
		email,
		phone_number,
		hire_date,
		job_id,
		salary,
		commission_pct,
		manager_id,
		department_id
		FROM employees
		ORDER BY employee_id
	</select>

	<!-- 단건 조회 -->
	<select id="selectEmpInfo" resultType="EmpVO">
		SELECT
		employee_id,
		first_name,
		last_name,
		email,
		phone_number,
		hire_date,
		job_id,
		salary,
		commission_pct,
		manager_id,
		department_id
		FROM employees
		WHERE employee_id = #{employeeId}
		ORDER BY employee_id
	</select>
	<!-- 파라메터를 통해서 매개변수값을 받아 올 때 #,$ 사용한다 -->
	<!-- #{ } : PreparStatment;?에 데이터를 넣는 형태, 들어오는 데이터에 맞춰 타입을 정해줌 숫자는 숫자로 문자는 
		문자로 ex 0-=>0 Kang->'Kang' ${ } : 0 -> 0 , Kang -> Kang 와같이 변환해 주지 않고 걍 받아온다. -->

	<!-- 등록 -->
	<!-- insert 의 resultType은 항상 int 이기 때문에 설정이 안되니 건들지 말자 -->
	<insert id="insertEmpInfo" parameterType="EmpVO">
		<selectKey keyProperty="employeeId" resultType="int"
			order="BEFORE">
			<!-- NVL 을 쓰는 이유는 최초 값은 아무것도 없기 때문에 -->
			SELECT NVL(MAX(employee_id),0) + 1 FROM employees
		</selectKey>
		INSERT INTO employees(employee_id, first_name, last_name,
		email,hire_date, job_id, salary)
		VALUES
		(#{employeeId},#{firstName},#{lastName},#{email},sysdate,#{jobId},#{salary})
	</insert>

	<!-- 수정 -->
	<!-- 급여를 정해진 비율로 인상 -->
	<update id="updateEmpSal">
		UPDATE employees
		SET salary = salary * (1 + #{raise}/100)
		WHERE employee_id = #{employeeId}
	</update>


	<!-- 사원정보 수정 -->
	<!-- 1) 모든항목에 대해서 업데이트 진행, 전제조건 : 모든 항목에 정보가 존재 -->
	<!-- 2) Mybatis -> DynamicS QL 사용 -->
	<update id="updateEmpInfo" parameterType="EmpVO">
		UPDATE employees
		<set>
			<if test="firstName != null and !firstName.equals('')">
				first_name = #{firstName},
			</if>
			<if test="email !=null and !email.equals('')">
				email = #{email},
			</if>
			<if test="salary > 0">
				salary = #{salary}
			</if>
		</set>
		WHERE employee_id = #{employeeId}
	</update>

	<!-- 삭제 -->
	<delete id="deleteEmpInfo" parameterType="int">
		DELETE FROM employees
		WHERE employee_id = #{employeeId}
	</delete>

</mapper>
  